#!/usr/bin/env python3
"""
Debug b≈Çƒôdu walidacji Fiserv - sprawd≈∫ wszystkie pola
"""

import sys
import os
from datetime import datetime
from zoneinfo import ZoneInfo

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.utils.fiserv_ipg_client import FiservIPGClient

def debug_validation():
    """Sprawd≈∫ dok≈Çadnie co wysy≈Çamy do Fiserv"""
    
    print("="*60)
    print("DEBUG: B≈ÅƒÑD WALIDACJI FISERV")
    print("="*60)
    
    client = FiservIPGClient()
    
    # Generuj dane testowe
    test_order_id = f"DEBUG-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    form_data = client.create_payment_form_data(
        amount=10.00,
        order_id=test_order_id,
        description="Debug validation error",
        success_url="https://charity.ngrok.app/success",
        failure_url="https://charity.ngrok.app/failure",
        notification_url="https://charity-webhook.ngrok.app/webhook",
        customer_info={
            "name": "Jan Kowalski",
            "email": "jan@example.com"
        }
    )
    
    fields = form_data['form_fields']
    
    print("\nüìã WSZYSTKIE WYSY≈ÅANE POLA:")
    print("-" * 40)
    
    # Sortuj alfabetycznie dla lepszej czytelno≈õci
    for key in sorted(fields.keys()):
        value = fields[key]
        if key == 'hashExtended':
            print(f"{key:30} = {value[:20]}... (len: {len(value)})")
        else:
            print(f"{key:30} = {value}")
    
    print("\nüîç ANALIZA KLUCZOWYCH P√ìL:")
    print("-" * 40)
    
    # Sprawd≈∫ timezone
    timezone = fields.get('timezone')
    print(f"\n1. TIMEZONE: {timezone}")
    if timezone != 'Europe/Warsaw':
        print(f"   ‚ùå B≈ÅƒÑD! Powinno byƒá 'Europe/Warsaw'")
    else:
        print(f"   ‚úÖ OK")
    
    # Sprawd≈∫ timestamp
    txndatetime = fields.get('txndatetime')
    print(f"\n2. TIMESTAMP: {txndatetime}")
    
    # Weryfikuj format
    if len(txndatetime) != 19:
        print(f"   ‚ùå B≈ÅƒÑD! Nieprawid≈Çowa d≈Çugo≈õƒá: {len(txndatetime)}")
    elif txndatetime[4] != ':' or txndatetime[7] != ':' or txndatetime[10] != '-':
        print(f"   ‚ùå B≈ÅƒÑD! Nieprawid≈Çowy format")
    else:
        print(f"   ‚úÖ Format OK")
    
    # Sprawd≈∫ aktualno≈õƒá
    warsaw_tz = ZoneInfo('Europe/Warsaw')
    now = datetime.now(warsaw_tz)
    
    try:
        parts = txndatetime.split('-')
        date_parts = parts[0].split(':')
        time_parts = parts[1].split(':')
        
        ts_dt = datetime(
            int(date_parts[0]), int(date_parts[1]), int(date_parts[2]),
            int(time_parts[0]), int(time_parts[1]), int(time_parts[2]),
            tzinfo=warsaw_tz
        )
        
        diff = (now - ts_dt).total_seconds()
        
        if abs(diff) < 60:
            print(f"   ‚úÖ Czas aktualny (r√≥≈ºnica {abs(diff):.1f}s)")
        elif diff > 0:
            print(f"   ‚ö†Ô∏è Timestamp z przesz≈Ço≈õci ({diff:.0f}s temu)")
        else:
            print(f"   ‚ùå Timestamp z przysz≈Ço≈õci! ({abs(diff):.0f}s)")
            
    except Exception as e:
        print(f"   ‚ùå B≈ÇƒÖd parsowania: {e}")
    
    # Sprawd≈∫ wymagane pola
    print("\n3. WYMAGANE POLA:")
    required_fields = [
        'storename',
        'txntype', 
        'timezone',
        'txndatetime',
        'hash_algorithm',
        'chargetotal',
        'currency',
        'checkoutoption',
        'oid'
    ]
    
    missing = []
    for field in required_fields:
        if field not in fields or not fields[field]:
            missing.append(field)
            print(f"   ‚ùå {field}: BRAK!")
        else:
            print(f"   ‚úÖ {field}: {fields[field]}")
    
    # Sprawd≈∫ URLs
    print("\n4. ADRESY URL:")
    url_fields = ['responseSuccessURL', 'responseFailURL', 'transactionNotificationURL']
    for field in url_fields:
        url = fields.get(field)
        if url:
            if url.startswith('http://localhost'):
                print(f"   ‚ö†Ô∏è {field}: localhost (Fiserv nie mo≈ºe dotrzeƒá)")
            elif url.startswith('https://'):
                print(f"   ‚úÖ {field}: OK")
            else:
                print(f"   ‚ùå {field}: Nieprawid≈Çowy protok√≥≈Ç")
        else:
            print(f"   ‚ö†Ô∏è {field}: Brak (opcjonalne)")
    
    # Sprawd≈∫ hash
    print("\n5. HASH:")
    hash_alg = fields.get('hash_algorithm')
    hash_ext = fields.get('hashExtended')
    
    if hash_alg != 'HMACSHA256':
        print(f"   ‚ùå hash_algorithm: {hash_alg} (powinno byƒá HMACSHA256)")
    else:
        print(f"   ‚úÖ hash_algorithm: {hash_alg}")
    
    if not hash_ext:
        print(f"   ‚ùå hashExtended: BRAK!")
    elif len(hash_ext) < 20:
        print(f"   ‚ùå hashExtended: Za kr√≥tki ({len(hash_ext)} znak√≥w)")
    else:
        print(f"   ‚úÖ hashExtended: OK (d≈Çugo≈õƒá: {len(hash_ext)})")
    
    # Oblicz hash ponownie do weryfikacji
    print("\n6. WERYFIKACJA HASHA:")
    exclude_fields = {'hash', 'hashExtended', 'hash_algorithm'}
    hash_fields = {k: v for k, v in fields.items() if k not in exclude_fields}
    sorted_fields = sorted(hash_fields.items())
    hash_string = '|'.join(str(v) for k, v in sorted_fields)
    
    print(f"   String do hasha (pierwsze 150 znak√≥w):")
    print(f"   {hash_string[:150]}...")
    
    # Podsumowanie
    print("\n" + "="*60)
    print("PODSUMOWANIE:")
    print("="*60)
    
    if missing:
        print("‚ùå BRAKUJƒÑCE POLA:")
        for field in missing:
            print(f"   - {field}")
    
    problems = []
    
    if timezone != 'Europe/Warsaw':
        problems.append(f"Timezone: {timezone} (powinno byƒá Europe/Warsaw)")
    
    if abs(diff) > 300:  # Wiƒôcej ni≈º 5 minut
        problems.append(f"Timestamp nieaktualny (r√≥≈ºnica {abs(diff)/60:.1f} minut)")
    
    if problems:
        print("\n‚ùå ZNALEZIONE PROBLEMY:")
        for problem in problems:
            print(f"   - {problem}")
    else:
        print("\n‚úÖ Wszystkie pola wyglƒÖdajƒÖ poprawnie")
        print("\nü§î Mo≈ºliwe przyczyny b≈Çƒôdu walidacji:")
        print("   1. Konto/sklep nie jest poprawnie skonfigurowany")
        print("   2. Brak uprawnie≈Ñ do Combined Page")
        print("   3. Nieprawid≈Çowy shared secret do generowania hasha")
        print("   4. URLs mogƒÖ byƒá blokowane przez Fiserv")
    
    return fields

if __name__ == "__main__":
    debug_validation()