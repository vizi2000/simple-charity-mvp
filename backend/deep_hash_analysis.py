#!/usr/bin/env python3
"""
G≈ÅƒòBOKA ANALIZA GENEROWANIA HASHA
Sprawdzenie czy hash jest generowany z dok≈Çadnie tych samych p√≥l kt√≥re sƒÖ wysy≈Çane
"""

import hmac
import hashlib
import base64
from collections import OrderedDict


def analyze_hash_generation():
    """Dok≈Çadna analiza generowania hasha"""
    
    print("="*70)
    print("G≈ÅƒòBOKA ANALIZA GENEROWANIA HASHA FISERV")
    print("="*70)
    
    # DOK≈ÅADNE dane z przyk≈Çadu Fiserv
    example_fields = OrderedDict([
        ('storename', '760995999'),
        ('txntype', 'sale'),
        ('timezone', 'Europe/Warsaw'),
        ('txndatetime', '2025:07:28-22:15:45'),
        ('chargetotal', '50.00'),
        ('currency', '985'),
        ('checkoutoption', 'combinedpage'),
        ('oid', 'd4742929-665f-4a8e-a696-2fc2717841dc'),
        ('responseSuccessURL', 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=success'),
        ('responseFailURL', 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=failure'),
        ('transactionNotificationURL', 'https://charity-webhook.ngrok.app/api/webhooks/fiserv'),
        ('bname', 'Jan Kowalski'),
        ('bemail', 'jan.kowalski@example.com'),
        ('hash_algorithm', 'HMACSHA256'),
        ('hashExtended', '7xQK8PzVh9mJ4kL2nF6sT3wRyD5gE1aB0cU...')
    ])
    
    print("\nüìã POLA Z PRZYK≈ÅADU FISERV:")
    print("-" * 50)
    for key, value in example_fields.items():
        if key == 'hashExtended':
            print(f"{key:30} = {value[:20]}...")
        else:
            print(f"{key:30} = {value}")
    
    # KROK 1: Okre≈õl kt√≥re pola wchodzƒÖ do hasha
    print("\n" + "="*70)
    print("KROK 1: KT√ìRE POLA WCHODZƒÑ DO HASHA?")
    print("="*70)
    
    # Pola kt√≥re NIE wchodzƒÖ do hasha wed≈Çug dokumentacji
    exclude_from_hash = {'hash_algorithm', 'hashExtended', 'hash'}
    
    # Pola do hasha
    fields_for_hash = OrderedDict()
    for key, value in example_fields.items():
        if key not in exclude_from_hash:
            fields_for_hash[key] = value
    
    print("\n‚úÖ POLA DO HASHA (bez hash_algorithm i hashExtended):")
    for i, (key, value) in enumerate(fields_for_hash.items(), 1):
        print(f"{i:2}. {key:30} = {value[:50]}...")
    
    # KROK 2: Sortowanie alfabetyczne
    print("\n" + "="*70)
    print("KROK 2: SORTOWANIE ALFABETYCZNE")
    print("="*70)
    
    sorted_fields = OrderedDict(sorted(fields_for_hash.items()))
    
    print("\nüìù POLA PO SORTOWANIU ALFABETYCZNYM:")
    for i, (key, value) in enumerate(sorted_fields.items(), 1):
        print(f"{i:2}. {key:30} = {value[:50]}...")
    
    # KROK 3: Tworzenie stringu do hasha
    print("\n" + "="*70)
    print("KROK 3: TWORZENIE STRINGU DO HASHA")
    print("="*70)
    
    # Metoda 1: Tylko warto≈õci (jak w dokumentacji)
    values_only = '|'.join(str(value) for value in sorted_fields.values())
    
    print("\nüîπ METODA 1: Tylko warto≈õci (pipe-separated):")
    print("-" * 50)
    print(f"D≈Çugo≈õƒá: {len(values_only)} znak√≥w")
    print(f"Pierwsze 200 znak√≥w:")
    print(values_only[:200])
    print("...")
    print(f"Ostatnie 100 znak√≥w:")
    print(values_only[-100:])
    
    # Metoda 2: Klucz=warto≈õƒá (alternatywna)
    key_value_pairs = '|'.join(f"{key}={value}" for key, value in sorted_fields.items())
    
    print("\nüîπ METODA 2: Klucz=warto≈õƒá (alternatywna):")
    print("-" * 50)
    print(f"D≈Çugo≈õƒá: {len(key_value_pairs)} znak√≥w")
    print(f"Pierwsze 200 znak√≥w:")
    print(key_value_pairs[:200])
    
    # KROK 4: Obliczanie hasha
    print("\n" + "="*70)
    print("KROK 4: OBLICZANIE HASHA")
    print("="*70)
    
    shared_secret = "j}2W3P)Lwv"
    
    print(f"\nüîë Shared Secret: {shared_secret}")
    
    # Hash dla metody 1 (tylko warto≈õci)
    hash1 = hmac.new(
        shared_secret.encode('utf-8'),
        values_only.encode('utf-8'),
        hashlib.sha256
    ).digest()
    hash1_base64 = base64.b64encode(hash1).decode('utf-8')
    
    print(f"\nüìä METODA 1 - Hash (tylko warto≈õci):")
    print(f"   Base64: {hash1_base64}")
    print(f"   D≈Çugo≈õƒá: {len(hash1_base64)} znak√≥w")
    
    # Hash dla metody 2 (klucz=warto≈õƒá)
    hash2 = hmac.new(
        shared_secret.encode('utf-8'),
        key_value_pairs.encode('utf-8'),
        hashlib.sha256
    ).digest()
    hash2_base64 = base64.b64encode(hash2).decode('utf-8')
    
    print(f"\nüìä METODA 2 - Hash (klucz=warto≈õƒá):")
    print(f"   Base64: {hash2_base64}")
    print(f"   D≈Çugo≈õƒá: {len(hash2_base64)} znak√≥w")
    
    # KROK 5: Weryfikacja kolejno≈õci p√≥l
    print("\n" + "="*70)
    print("KROK 5: WERYFIKACJA KOLEJNO≈öCI P√ìL")
    print("="*70)
    
    print("\nüîç KOLEJNO≈öƒÜ ALFABETYCZNA (wa≈ºne!):")
    expected_order = [
        'bemail',
        'bname', 
        'chargetotal',
        'checkoutoption',
        'currency',
        'oid',
        'responseFailURL',
        'responseSuccessURL',
        'storename',
        'timezone',
        'transactionNotificationURL',
        'txndatetime',
        'txntype'
    ]
    
    actual_order = list(sorted_fields.keys())
    
    print("\nOczekiwana kolejno≈õƒá:")
    for i, field in enumerate(expected_order, 1):
        print(f"  {i:2}. {field}")
    
    print("\nRzeczywista kolejno≈õƒá:")
    for i, field in enumerate(actual_order, 1):
        match = "‚úÖ" if i <= len(expected_order) and field == expected_order[i-1] else "‚ùå"
        print(f"  {i:2}. {field} {match}")
    
    # KROK 6: Szczeg√≥≈Çowa analiza stringu
    print("\n" + "="*70)
    print("KROK 6: SZCZEG√ì≈ÅOWA ANALIZA STRINGU DO HASHA")
    print("="*70)
    
    print("\nüìù PE≈ÅNY STRING DO HASHA (metoda 1 - tylko warto≈õci):")
    print("-" * 50)
    
    # Rozbij na czƒô≈õci dla lepszej czytelno≈õci
    values_list = list(sorted_fields.values())
    for i, (key, value) in enumerate(sorted_fields.items()):
        print(f"{i+1:2}. [{key}]: {value}")
    
    print("\nüîó Z≈ÅƒÑCZONY STRING:")
    print(values_only)
    
    # KROK 7: Problemy do sprawdzenia
    print("\n" + "="*70)
    print("‚ö†Ô∏è POTENCJALNE PROBLEMY DO SPRAWDZENIA:")
    print("="*70)
    
    print("""
1. ‚ùì Czy URLe sƒÖ dok≈Çadnie takie same?
   - Czy nie ma dodatkowych spacji?
   - Czy nie ma zakodowanych znak√≥w (&amp; zamiast &)?
   
2. ‚ùì Czy timestamp jest aktualny?
   - Hash musi byƒá generowany z TYM SAMYM timestampem kt√≥ry jest wysy≈Çany
   
3. ‚ùì Czy wszystkie pola sƒÖ uwzglƒôdnione?
   - Czy nie brakuje ≈ºadnego pola?
   - Czy nie ma dodatkowych p√≥l?
   
4. ‚ùì Czy kolejno≈õƒá jest alfabetyczna?
   - Sortowanie MUSI byƒá alfabetyczne po KLUCZU
   
5. ‚ùì Czy shared secret jest poprawny?
   - "j}2W3P)Lwv" - czy to na pewno aktualny secret?
    """)
    
    return {
        'fields_for_hash': fields_for_hash,
        'sorted_fields': sorted_fields,
        'hash_string': values_only,
        'calculated_hash': hash1_base64
    }


def test_our_implementation():
    """Test naszej implementacji z tymi samymi danymi"""
    
    print("\n" + "="*70)
    print("TEST NASZEJ IMPLEMENTACJI")
    print("="*70)
    
    from fiserv_payment_v2 import FiservIPGPayment
    
    client = FiservIPGPayment()
    
    # U≈ºyj dok≈Çadnie tych samych danych
    test_fields = {
        'storename': '760995999',
        'txntype': 'sale',
        'timezone': 'Europe/Warsaw',
        'txndatetime': '2025:07:28-22:15:45',
        'chargetotal': '50.00',
        'currency': '985',
        'checkoutoption': 'combinedpage',
        'oid': 'd4742929-665f-4a8e-a696-2fc2717841dc',
        'responseSuccessURL': 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=success',
        'responseFailURL': 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=failure',
        'transactionNotificationURL': 'https://charity-webhook.ngrok.app/api/webhooks/fiserv',
        'bname': 'Jan Kowalski',
        'bemail': 'jan.kowalski@example.com',
        'hash_algorithm': 'HMACSHA256'
    }
    
    # Oblicz hash u≈ºywajƒÖc naszej metody
    our_hash = client.calculate_hash(test_fields)
    
    print(f"\nüîß NASZ HASH:")
    print(f"   {our_hash}")
    
    # Por√≥wnaj z przyk≈Çadem
    example_hash_fragment = "7xQK8PzVh9mJ4kL2nF6sT3wRyD5gE1aB0cU"
    
    if our_hash.startswith(example_hash_fragment):
        print(f"\n‚úÖ HASH ZGADZA SIƒò Z PRZYK≈ÅADEM!")
    else:
        print(f"\n‚ùå HASH NIE ZGADZA SIƒò!")
        print(f"   Oczekiwany poczƒÖtek: {example_hash_fragment}...")
        print(f"   Nasz poczƒÖtek:       {our_hash[:36]}...")
    
    return our_hash


if __name__ == "__main__":
    # Analiza
    result = analyze_hash_generation()
    
    # Test naszej implementacji
    our_hash = test_our_implementation()
    
    print("\n" + "="*70)
    print("WNIOSKI")
    print("="*70)
    
    print("""
üéØ KRYTYCZNE PUNKTY:
1. Hash musi byƒá generowany z p√≥l POSORTOWANYCH alfabetycznie
2. Do hasha wchodzƒÖ WSZYSTKIE pola OPR√ìCZ: hash_algorithm, hashExtended
3. String to TYLKO WARTO≈öCI po≈ÇƒÖczone znakiem |
4. Timestamp w hashu MUSI byƒá identyczny z wysy≈Çanym
    """)