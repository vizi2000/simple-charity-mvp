#!/usr/bin/env python3
"""
Por√≥wnanie naszych p√≥l z przyk≈Çadem od Fiserv
"""

from datetime import datetime
from zoneinfo import ZoneInfo

# Przyk≈Çad od Fiserv (z emaila)
fiserv_example = {
    'storename': '760995999',
    'txntype': 'sale',
    'timezone': 'Europe/Warsaw',
    'txndatetime': '2025:07:28-22:15:45',  # To by≈Ç przyk≈Çad
    'chargetotal': '50.00',
    'currency': '985',
    'checkoutoption': 'combinedpage',
    'oid': 'd4742929-665f-4a8e-a696-2fc2717841dc',
    'responseSuccessURL': 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=success',
    'responseFailURL': 'https://charity.ngrok.app/platnosc/d4742929-665f-4a8e-a696-2fc2717841dc/status?result=failure',
    'transactionNotificationURL': 'https://charity-webhook.ngrok.app/api/webhooks/fiserv',
    'bname': 'Jan Kowalski',
    'bemail': 'jan.kowalski@example.com',
    'hash_algorithm': 'HMACSHA256',
    'hashExtended': '7xQK8PzVh9mJ4kL2nF6sT3wRyD5gE1aB0cU...'
}

# Nasze aktualne pola
our_fields = {
    'bemail': 'jan@example.com',
    'bname': 'Jan Kowalski',
    'chargetotal': '10.00',
    'checkoutoption': 'combinedpage',
    'currency': '985',
    'hashExtended': 'bMaHIWM/19jWcMCv2+Bc...',
    'hash_algorithm': 'HMACSHA256',
    'oid': 'DEBUG-20250809064114',
    'responseFailURL': 'https://charity.ngrok.app/failure',
    'responseSuccessURL': 'https://charity.ngrok.app/success',
    'storename': '760995999',
    'timezone': 'Europe/Warsaw',
    'transactionNotificationURL': 'https://charity-webhook.ngrok.app/webhook',
    'txndatetime': '2025:08:09-06:41:14',
    'txntype': 'sale'
}

print("="*60)
print("POR√ìWNANIE Z PRZYK≈ÅADEM FISERV")
print("="*60)

# Znajd≈∫ r√≥≈ºnice
print("\nüìä ANALIZA R√ì≈ªNIC:")
print("-" * 40)

# Pola kt√≥re sƒÖ w przyk≈Çadzie ale nie u nas
missing_in_ours = set(fiserv_example.keys()) - set(our_fields.keys())
if missing_in_ours:
    print("\n‚ùå BRAKUJƒÑCE POLA (sƒÖ w przyk≈Çadzie, nie ma u nas):")
    for field in missing_in_ours:
        print(f"   - {field}: {fiserv_example[field]}")
else:
    print("\n‚úÖ Nie brakuje ≈ºadnych p√≥l z przyk≈Çadu")

# Pola kt√≥re mamy ale nie ma w przyk≈Çadzie
extra_in_ours = set(our_fields.keys()) - set(fiserv_example.keys())
if extra_in_ours:
    print("\n‚ö†Ô∏è DODATKOWE POLA (mamy, ale nie ma w przyk≈Çadzie):")
    for field in extra_in_ours:
        print(f"   - {field}: {our_fields[field]}")

# Por√≥wnaj warto≈õci wsp√≥lnych p√≥l
print("\nüîç POR√ìWNANIE WARTO≈öCI:")
print("-" * 40)

differences = []
for field in sorted(set(fiserv_example.keys()) & set(our_fields.keys())):
    if field in ['hashExtended', 'txndatetime', 'oid', 'chargetotal']:
        # Te pola siƒô r√≥≈ºniƒÖ z definicji
        continue
    
    if field in ['responseSuccessURL', 'responseFailURL', 'transactionNotificationURL']:
        # URLs mogƒÖ siƒô r√≥≈ºniƒá w szczeg√≥≈Çach
        fiserv_val = fiserv_example[field]
        our_val = our_fields[field]
        
        # Sprawd≈∫ g≈Ç√≥wnƒÖ domenƒô
        if 'ngrok' in fiserv_val and 'ngrok' in our_val:
            print(f"‚úÖ {field}: OK (oba u≈ºywajƒÖ ngrok)")
        else:
            differences.append(f"{field}: r√≥≈ºne domeny")
            print(f"‚ö†Ô∏è {field}:")
            print(f"   Fiserv: {fiserv_val[:50]}...")
            print(f"   My:     {our_val[:50]}...")
    
    elif field in ['bname', 'bemail']:
        # Dane klienta mogƒÖ siƒô r√≥≈ºniƒá
        continue
    
    else:
        fiserv_val = fiserv_example[field]
        our_val = our_fields[field]
        
        if fiserv_val != our_val:
            differences.append(f"{field}: '{fiserv_val}' vs '{our_val}'")
            print(f"‚ùå {field}:")
            print(f"   Fiserv: {fiserv_val}")
            print(f"   My:     {our_val}")
        else:
            print(f"‚úÖ {field}: {our_val}")

# Sprawd≈∫ kolejno≈õƒá p√≥l do hasha
print("\nüìù KOLEJNO≈öƒÜ P√ìL DO HASHA:")
print("-" * 40)

# Pola u≈ºywane do hasha (alfabetycznie, bez hash_algorithm i hashExtended)
hash_fields_fiserv = sorted([k for k in fiserv_example.keys() 
                            if k not in ['hash_algorithm', 'hashExtended']])
hash_fields_ours = sorted([k for k in our_fields.keys() 
                          if k not in ['hash_algorithm', 'hashExtended']])

print("Fiserv u≈ºywa p√≥l:")
for field in hash_fields_fiserv:
    print(f"   {field}")

print("\nMy u≈ºywamy p√≥l:")
for field in hash_fields_ours:
    print(f"   {field}")

if hash_fields_fiserv == hash_fields_ours:
    print("\n‚úÖ Kolejno≈õƒá i lista p√≥l do hasha jest identyczna")
else:
    print("\n‚ùå R√≥≈ºnice w polach do hasha!")

# String do hasha - przyk≈Çad
print("\nüîê PRZYK≈ÅAD STRINGU DO HASHA:")
print("-" * 40)

# Dla przyk≈Çadu Fiserv
fiserv_hash_values = [fiserv_example[k] for k in hash_fields_fiserv]
fiserv_hash_string = '|'.join(fiserv_hash_values)
print("Fiserv (pierwsze 150 znak√≥w):")
print(f"{fiserv_hash_string[:150]}...")

# Dla nas
our_hash_values = [our_fields[k] for k in hash_fields_ours]
our_hash_string = '|'.join(our_hash_values)
print("\nNasz (pierwsze 150 znak√≥w):")
print(f"{our_hash_string[:150]}...")

# Podsumowanie
print("\n" + "="*60)
print("PODSUMOWANIE:")
print("="*60)

if not missing_in_ours and not differences:
    print("‚úÖ Struktura danych jest zgodna z przyk≈Çadem Fiserv")
    print("   Wszystkie wymagane pola sƒÖ obecne")
    print("   Formaty sƒÖ poprawne")
    
    print("\nüéØ PRAWDOPODOBNA PRZYCZYNA B≈ÅƒòDU:")
    print("   Problem nie jest w strukturze danych, ale w:")
    print("   1. Hash - mo≈ºe byƒá nieprawid≈Çowy shared secret")
    print("   2. Timestamp - mimo ≈ºe format jest OK, mo≈ºe byƒá problem z synchronizacjƒÖ czasu")
    print("   3. Konfiguracja konta - brak uprawnie≈Ñ do Combined Page")
else:
    print("‚ùå Znaleziono r√≥≈ºnice:")
    if missing_in_ours:
        print(f"   Brakuje {len(missing_in_ours)} p√≥l")
    if differences:
        for diff in differences:
            print(f"   - {diff}")